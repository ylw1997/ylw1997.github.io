import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.FFX0tUBF.js";const F=JSON.parse('{"title":"前端漏洞修复","description":"","frontmatter":{},"headers":[],"relativePath":"front/other/bug.md","filePath":"front/other/bug.md","lastUpdated":1718595362000}'),l={name:"front/other/bug.md"},t=n(`<h1 id="前端漏洞修复" tabindex="-1">前端漏洞修复 <a class="header-anchor" href="#前端漏洞修复" aria-label="Permalink to &quot;前端漏洞修复&quot;">​</a></h1><h2 id="_1-启用不安全的tls1-0协议" tabindex="-1">1,启用不安全的TLS1.0协议 <a class="header-anchor" href="#_1-启用不安全的tls1-0协议" aria-label="Permalink to &quot;1,启用不安全的TLS1.0协议&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>TLS全称为：Transport Layer Security——安全传输层协议，用于在两个通信应用程序之间提供保密性和数据完整性。TLS 1.0是于1996年发布的老版协议，使用的是弱加密算法和系统。比如SHA-1和MD5，这些算法和系统十分脆弱，存在重大安全漏洞，容易受到降级攻击的严重影响。</p><p>修复建议:采用2008年和2017年发布的协议新版本，分为TLS 1.2和TLS 1.3。</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1,修改配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2,添加如下配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssl_protocols</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TLSv1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3,重启nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span></code></pre></div><h2 id="_2-会话cookie中缺少secure属性" tabindex="-1">2,会话Cookie中缺少secure属性 <a class="header-anchor" href="#_2-会话cookie中缺少secure属性" aria-label="Permalink to &quot;2,会话Cookie中缺少secure属性&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>secure属性是指定浏览器只有在请求使用SSL和HTTPS协议的时候才会把Cookie发送到服务器，如果是HTTP请求则不会发送。如果没有设置secure属性，那么浏览器会在HTTP和HTTPS两种协议下都发送Cookie，这样会增加Cookie被盗取的风险。</p></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改设置cookie方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cookies.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;unionId&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value, { expires: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, secure: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><h2 id="_3-http-referrer-policy缺失" tabindex="-1">3,HTTP Referrer-Policy缺失 <a class="header-anchor" href="#_3-http-referrer-policy缺失" aria-label="Permalink to &quot;3,HTTP Referrer-Policy缺失&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>Web 服务器对于 HTTP 请求的响应头中缺少 Referrer-Policy，这将导致浏览器提供的安全特性失效。 当用户在浏览器上点击一个链接时，会产生一个 HTTP 请求，用于获取新的页面内容，而在该请求的报头中，会包含一个 Referrer，用以指定该请求是从哪个页面跳转页来的，常被用于分析用户来源等信息。但是也成为了一个不安全的因素，所以就有了 Referrer-Policy，用于过滤 Referrer 报头内容，其可选的项有： no-referrer no-referrer-when-downgrade origin origin-when-cross-origin same-origin strict-origin strict-origin-when-cross-origin unsafe-url 漏洞危害： Web 服务器对于 HTTP 请求的响应头中缺少 Referrer-Policy，这将导致浏览器提供的安全特性失效，更容易遭受 Web 前端黑客攻击的影响。</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1,修改配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2,添加如下配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Referrer-Policy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3,重启nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span></code></pre></div><h2 id="_4-http-x-xss-protection缺失" tabindex="-1">4, HTTP X-XSS-Protection缺失 <a class="header-anchor" href="#_4-http-x-xss-protection缺失" aria-label="Permalink to &quot;4, HTTP X-XSS-Protection缺失&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>HTTP X-XSS-Protection 响应头是 Internet Explorer，Chrome 和 Safari 的一个特性，当检测到跨站脚本攻击 (XSS)时，浏览器将停止加载页面。若网站设置了良好的 Content-Security-Policy 来禁用内联 JavaScript (&#39;unsafe-inline&#39;)，现代浏览器不太需要这些保护， 但其仍然可以为尚不支持 CSP 的旧版浏览器的用户提供保护。</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1,修改配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2,添加如下配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-XSS-Protection</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1; mode=block&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3,重启nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span></code></pre></div><h2 id="_5-http-content-security-policy缺失" tabindex="-1">5,HTTP Content-Security-Policy缺失 <a class="header-anchor" href="#_5-http-content-security-policy缺失" aria-label="Permalink to &quot;5,HTTP Content-Security-Policy缺失&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>内容安全策略 (CSP) 是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。CSP 的实质就是白名单制度，开发者明确告诉客户端，哪些外部资源可以加载和执行，等同于提供白名单。它的实现和执行全部由浏览器完成，开发者只需提供配置。CSP 大大增强了网页的安全性。攻击者即使发现了漏洞，也没法注入脚本，除非还控制了一台列入了白名单的可信主机。CSP开启可能会导致js、css出现报错。</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1,修改配置文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2,添加如下配置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Content-Security-Policy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;script-src https: &#39;unsafe-inline&#39;; frame-ancestors &#39;self&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3,重启nginx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span></code></pre></div><h2 id="_6-http-x-permitted-cross-domain-policies缺失" tabindex="-1">6,HTTP X-Permitted-Cross-Domain-Policies缺失 <a class="header-anchor" href="#_6-http-x-permitted-cross-domain-policies缺失" aria-label="Permalink to &quot;6,HTTP X-Permitted-Cross-Domain-Policies缺失&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>Web 服务器对于 HTTP 请求的响应头中缺少 X-Permitted-Cross-Domain-Policies，这将导致浏览器提供的安全特性失效。 当一些在线的 Web Flash 需要加载其他域的内容时，很多 Web 会通过设置一个 crossdomain.xml 文件的方式来控制其跨域方式。很有可能有些开发者并没有修改 crossdomain.xml 文件的权限，但是又有和跨域的 Flash 共享数据的需求，这时候可以通过设置 X-Permitted-Cross-Domain-Policies 头的方式来替代 crossdomain.xml 文件，其可选的值有： none master-only by-content-type by-ftp-filename all。Web 服务器对于 HTTP 请求的响应头中缺少 X-Permitted-Cross-Domain-Policies，这将导致浏览器提供的安全特性失效，更容易遭受 Web 前端黑客攻击的影响。</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1,修改配置文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2,添加如下配置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Permitted-Cross-Domain-Policies</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3,重启nginx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span></code></pre></div><h2 id="_7-x-frame-options-header未配置" tabindex="-1">7,  X-Frame-Options Header未配置 <a class="header-anchor" href="#_7-x-frame-options-header未配置" aria-label="Permalink to &quot;7,  X-Frame-Options Header未配置&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>X-Frame-Options HTTP响应头可以指示浏览器是否允许当前网页在“frame”或“iframe”标签中显示，以此使网站内容不被其他站点引用和免于点击劫持攻击。</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1,修改配置文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2,添加如下配置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Frame-Options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SAMEORIGIN&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3,重启nginx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span></code></pre></div><h2 id="_8-host头攻击" tabindex="-1">8,Host头攻击 <a class="header-anchor" href="#_8-host头攻击" aria-label="Permalink to &quot;8,Host头攻击&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>Host头攻击是指攻击者通过伪造HTTP请求的Host头，使得服务器无法正确识别出客户端的请求地址，从而导致服务器返回非预期的内容。例如，攻击者通过伪造Host头，使得服务器返回了攻击者指定的网站内容，从而达到攻击的目的。</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1,修改配置文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2,添加如下配置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;修改nginx配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">default_server&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3,重启nginx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span></code></pre></div><h2 id="_9-http-strict-transport-security缺失" tabindex="-1">9, HTTP Strict-Transport-Security缺失 <a class="header-anchor" href="#_9-http-strict-transport-security缺失" aria-label="Permalink to &quot;9, HTTP Strict-Transport-Security缺失&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>HTTP Strict-Transport-Security (HSTS) 是一个安全功能，旨在保护用户免受“中间人攻击”。 它通过强制客户端（例如浏览器）使用HTTPS与服务器进行连接，来防止HTTP的窥探攻击。 该功能通过HTTP响应头中的strict-transport-security策略来实现。 该策略指示浏览器在未来的请求中仅使用HTTPS与服务器进行连接，即使在用户输入URL时，也是如此。 该策略还指示浏览器将尝试使用HTTPS与服务器进行连接，而不是HTTP。 如果无法建立安全连接，则浏览器将不会尝试使用HTTP连接，从而防止中间人攻击。 该策略还可以防止用户点击“继续”按钮，从而防止中间人攻击。</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1,修改配置文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2,添加如下配置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Strict-Transport-Security</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;max-age=31536000; includeSubDomains&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3,重启nginx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span></code></pre></div><h2 id="_10-http-x-content-type-options缺失" tabindex="-1">10, HTTP X-Content-Type-Options缺失 <a class="header-anchor" href="#_10-http-x-content-type-options缺失" aria-label="Permalink to &quot;10, HTTP X-Content-Type-Options缺失&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>通过设置&quot;X-Content-Type-Options: nosniff&quot;响应标头，对 script 和 styleSheet 在执行是通过MIME 类型来过滤掉不安全的文件。设置X-Content-Type-Options，可能导致IE9、IE11拒绝加载没有返回Content-Type的相关资源。</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1,修改配置文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2,添加如下配置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Content-Type-Options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nosniff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3,重启nginx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span></code></pre></div><h2 id="_11-http-x-download-options缺失" tabindex="-1">11,HTTP X-Download-Options缺失 <a class="header-anchor" href="#_11-http-x-download-options缺失" aria-label="Permalink to &quot;11,HTTP X-Download-Options缺失&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>X-Download-Options HTTP响应头是一个微软特有的非标准的响应头，它指示浏览器是否应该阻止对下载的文件的执行。 它可以有两个值：noopen和nosniff。</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1,修改配置文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2,添加如下配置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Download-Options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> noopen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3,重启nginx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span></code></pre></div><h2 id="nginx配置实例" tabindex="-1">nginx配置实例 <a class="header-anchor" href="#nginx配置实例" aria-label="Permalink to &quot;nginx配置实例&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   /root/front</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            #try_files $uri $uri/ @router;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            try_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $uri $uri</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /index.html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  index.html</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.htm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Cache-Control</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no-cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Referrer-Policy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-XSS-Protection</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1;mode=block&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Content-Security-Policy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;script-src https: &#39;unsafe-inline&#39;; frame-ancestors &#39;self&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Permitted-Cross-Domain-Policies</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master-only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Frame-Options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SAMEORIGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Strict-Transport-Security</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;max-age=63072000; includeSubdomains; preload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Content-Type-Options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;nosniff&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Download-Options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> noopen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span></code></pre></div>`,36),p=[t];function e(h,k,r,o,d,c){return a(),i("div",null,p)}const y=s(l,[["render",e]]);export{F as __pageData,y as default};

import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.BZemHgQ6.js";const c=JSON.parse('{"title":"omniParser V2","description":"","frontmatter":{},"headers":[],"relativePath":"ai/omniparser.md","filePath":"ai/omniparser.md","lastUpdated":1740553768000}'),e={name:"ai/omniparser.md"};function l(p,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="omniparser-v2" tabindex="-1">omniParser V2 <a class="header-anchor" href="#omniparser-v2" aria-label="Permalink to &quot;omniParser V2&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">简介</p><ul><li>OmniParser基于深度学习技术，通过识别和理解用户界面中的元素，自动生成结构化数据</li><li>配合 pyautogui 可以实现自动化操作</li><li>开源地址 <a href="https://github.com/microsoft/OmniParser" target="_blank" rel="noreferrer">OmniParser</a></li></ul></div><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/microsoft/OmniParser.git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OmniParser</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.12</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 会根据.python-version中的python版本生成 .venv文件，即python虚拟环境</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将旧依赖方式同步到pyproject.toml中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载权重包</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># download the model checkpoints to local directory OmniParser/weights/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weights/icon_detect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weights/icon_caption</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weights/icon_caption_florence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">huggingface-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> download</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> microsoft/OmniParser-v2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --local-dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weights</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weights/icon_caption</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> weights/icon_caption_florence</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行demo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gradio_demo.py</span></span></code></pre></div><h2 id="运行" tabindex="-1">运行 <a class="header-anchor" href="#运行" aria-label="Permalink to &quot;运行&quot;">​</a></h2><p><img src="https://article.biliimg.com/bfs/new_dyn/171e3884eaa8cf2d1f2fe796ea20622f102411794.png@.webp" alt="截图"></p><p><img src="https://article.biliimg.com/bfs/new_dyn/fcbd8dff3da57da296dc4c665dd2d9c2102411794.png@.webp" alt="截图2"></p>`,7)]))}const F=i(e,[["render",l]]);export{c as __pageData,F as default};
